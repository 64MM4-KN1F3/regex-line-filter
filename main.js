/*
THIS IS A GENERATED/BUNDLED FILE BY ESBUILD
if you want to view the source, please visit the github repository of this plugin
*/

var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);

// main.ts
var main_exports = {};
__export(main_exports, {
  default: () => RegexLineFilterPlugin
});
module.exports = __toCommonJS(main_exports);
var import_obsidian = require("obsidian");
var import_state = require("@codemirror/state");
var import_view = require("@codemirror/view");
var REGEX_HISTORY_LIMIT = 5;
var ACTIVE_FILTER_BODY_CLASS = "regex-filter-active-body";
var DEFAULT_SETTINGS = { hideEmptyLines: true, regexHistory: [] };
var setRegexEffect = import_state.StateEffect.define();
var toggleFilterEffect = import_state.StateEffect.define();
var setHideEmptyLinesEffect = import_state.StateEffect.define();
var filterViewPlugin = import_view.ViewPlugin.fromClass(
  class {
    constructor(view) {
      this.decorations = this.buildDecorations(view);
    }
    update(update) {
      if (update.docChanged || update.viewportChanged || update.state.field(filterStateField) !== update.startState.field(filterStateField)) {
        this.decorations = this.buildDecorations(update.view);
      }
    }
    buildDecorations(view) {
      const builder = new import_state.RangeSetBuilder();
      const { regex, enabled, hideEmptyLines } = view.state.field(filterStateField);
      if (!enabled || !regex) {
        return builder.finish();
      }
      const doc = view.state.doc;
      try {
        for (let i = 1; i <= doc.lines; i++) {
          const line = doc.line(i);
          const lineText = line == null ? void 0 : line.text;
          if (typeof lineText !== "string") {
            continue;
          }
          const isEmpty = lineText.trim().length === 0;
          let shouldHide = false;
          let matchesRegex = regex.test(lineText);
          if (!matchesRegex) {
            shouldHide = true;
          }
          if (hideEmptyLines && isEmpty) {
            shouldHide = true;
          }
          if (shouldHide) {
            builder.add(line.from, line.from, import_view.Decoration.line({ attributes: { class: "regex-filter-hidden-line" } }));
          }
        }
      } catch (e) {
        console.error("Regex Line Filter: Error during decoration build:", e);
      }
      return builder.finish();
    }
  },
  { decorations: (v) => v.decorations }
);
var filterStateField = import_state.StateField.define({
  create(state) {
    return { regex: null, enabled: false, hideEmptyLines: DEFAULT_SETTINGS.hideEmptyLines };
  },
  update(value, tr) {
    let newValue = { ...value };
    for (let effect of tr.effects) {
      if (effect.is(setRegexEffect)) {
        newValue.regex = effect.value;
        newValue.enabled = !!effect.value;
      }
      if (effect.is(toggleFilterEffect)) {
        newValue.enabled = effect.value;
        if (!effect.value) {
          newValue.enabled = false;
        } else if (!newValue.regex) {
          newValue.enabled = false;
          console.warn("Attempted to enable filter without a regex.");
        }
      }
      if (effect.is(setHideEmptyLinesEffect)) {
        newValue.hideEmptyLines = effect.value;
      }
    }
    return newValue;
  }
});
var RegexLineFilterPlugin = class extends import_obsidian.Plugin {
  constructor() {
    super(...arguments);
    this.lastRegexStr = null;
    this.cssStyleEl = null;
  }
  async onload() {
    console.log("Loading Regex Line Filter plugin");
    await this.loadSettings();
    this.addCommand({ id: "toggle-regex-filter", name: "Toggle Regex Line Filter", editorCallback: (editor, view) => {
      this.toggleFilter(editor, view);
    } });
    this.addSettingTab(new RegexLineFilterSettingTab(this.app, this));
    this.registerEditorExtension([filterStateField, filterViewPlugin]);
    this.addCss();
    this.app.workspace.onLayoutReady(() => {
      this.dispatchSettingToEditors(this.settings.hideEmptyLines);
    });
  }
  onunload() {
    console.log("Unloading Regex Line Filter plugin");
    this.removeCss();
    this.app.workspace.iterateCodeMirrors((cm) => {
      try {
        const currentFilterState = cm.state.field(filterStateField, false);
        if (currentFilterState == null ? void 0 : currentFilterState.enabled) {
          cm.dispatch({ effects: toggleFilterEffect.of(false) });
        }
      } catch (e) {
      }
    });
  }
  async loadSettings() {
    this.settings = Object.assign({}, DEFAULT_SETTINGS, await this.loadData());
    if (!Array.isArray(this.settings.regexHistory)) {
      this.settings.regexHistory = [];
    }
    this.settings.regexHistory = this.settings.regexHistory.slice(0, REGEX_HISTORY_LIMIT);
  }
  async saveSettings() {
    await this.saveData(this.settings);
  }
  updateRegexHistory(newRegexString) {
    const filteredHistory = this.settings.regexHistory.filter((r) => r !== newRegexString);
    const updatedHistory = [newRegexString, ...filteredHistory];
    this.settings.regexHistory = updatedHistory.slice(0, REGEX_HISTORY_LIMIT);
    this.saveSettings();
  }
  dispatchSettingToEditors(newValue) {
    this.app.workspace.iterateCodeMirrors((cm) => {
      try {
        if (cm.state.field(filterStateField, false) !== void 0) {
          cm.dispatch({ effects: setHideEmptyLinesEffect.of(newValue) });
        }
      } catch (e) {
        console.warn("Regex Line Filter: Error dispatching setting", e);
      }
    });
  }
  // ----- Add CSS including the body class rule -----
  addCss() {
    if (document.getElementById("regex-filter-styles"))
      return;
    const css = `
            /* Rule to hide non-matching lines */
            .regex-filter-hidden-line {
                display: none !important;
            }

            /* Rule to style the active view when filter is on */
            body.${ACTIVE_FILTER_BODY_CLASS} .workspace-leaf.mod-active .view-content {
                /* Inset box shadow to darken edges */
                box-shadow: inset 0 0 0 70px rgba(0, 0, 0, 0.15); /* Adjust size/color/opacity */

                /* Alternatively, adjust padding and background */
                /* padding: 30px !important; */
                /* background-color: var(--background-secondary) !important; */

                transition: box-shadow 0.3s ease-in; /* Optional smooth transition */
            }

            /* Ensure padding doesn't affect CodeMirror gutter/line numbers if using padding approach */
            /* body.${ACTIVE_FILTER_BODY_CLASS} .workspace-leaf.mod-active .cm-editor { padding: 0 !important; } */
        `;
    this.cssStyleEl = document.createElement("style");
    this.cssStyleEl.id = "regex-line-filter-styles";
    this.cssStyleEl.textContent = css;
    document.head.appendChild(this.cssStyleEl);
  }
  // ----- End addCss -----
  // ----- removeCss now also removes body class -----
  removeCss() {
    if (this.cssStyleEl) {
      this.cssStyleEl.remove();
      this.cssStyleEl = null;
    }
    const existingStyle = document.getElementById("regex-line-filter-styles");
    if (existingStyle) {
      existingStyle.remove();
    }
    document.body.classList.remove(ACTIVE_FILTER_BODY_CLASS);
  }
  // ----- End removeCss -----
  // ----- toggleFilter manages body class -----
  toggleFilter(editor, view) {
    const cm = editor.cm;
    if (!cm || !(cm instanceof import_view.EditorView)) {
      new import_obsidian.Notice("Regex filter only works in Live Preview or Source Mode.");
      return;
    }
    const currentFilterState = cm.state.field(filterStateField, false);
    if (currentFilterState === void 0) {
      new import_obsidian.Notice("Filter not ready. Please try toggling again.");
      return;
    }
    if (currentFilterState.enabled) {
      cm.dispatch({ effects: toggleFilterEffect.of(false) });
      document.body.classList.remove(ACTIVE_FILTER_BODY_CLASS);
      new import_obsidian.Notice("Regex filter disabled.");
    } else {
      this.promptForRegex(cm);
    }
  }
  // ----- End toggleFilter -----
  // ----- promptForRegex manages body class -----
  promptForRegex(cm) {
    var _a, _b;
    const prefillValue = (_b = (_a = this.lastRegexStr) != null ? _a : this.settings.regexHistory[0]) != null ? _b : "";
    new RegexInputModal(this.app, prefillValue, this.settings.regexHistory, (result) => {
      if (result) {
        try {
          const regex = new RegExp(result, "u");
          this.lastRegexStr = result;
          this.updateRegexHistory(result);
          cm.dispatch({ effects: [setRegexEffect.of(regex)] });
          document.body.classList.add(ACTIVE_FILTER_BODY_CLASS);
          new import_obsidian.Notice(`Regex filter enabled: /${result}/u`);
        } catch (e) {
          const errorMessage = e instanceof Error ? e.message : String(e);
          new import_obsidian.Notice(`Invalid Regex: ${errorMessage}`);
          console.error("Regex Compile Error:", e);
          document.body.classList.remove(ACTIVE_FILTER_BODY_CLASS);
          try {
            cm.dispatch({ effects: toggleFilterEffect.of(false) });
          } catch (e2) {
          }
        }
      } else {
        new import_obsidian.Notice("Regex filter cancelled.");
        document.body.classList.remove(ACTIVE_FILTER_BODY_CLASS);
        try {
          cm.dispatch({ effects: toggleFilterEffect.of(false) });
        } catch (e) {
        }
      }
    }).open();
  }
  // ----- End promptForRegex -----
};
var RegexLineFilterSettingTab = class extends import_obsidian.PluginSettingTab {
  constructor(app, plugin) {
    super(app, plugin);
    this.plugin = plugin;
  }
  display() {
    const { containerEl } = this;
    containerEl.empty();
    containerEl.createEl("h2", { text: "Regex Line Filter Settings" });
    new import_obsidian.Setting(containerEl).setName("Hide empty lines").setDesc("When the filter is active, also hide lines that contain only whitespace.").addToggle((toggle) => toggle.setValue(this.plugin.settings.hideEmptyLines).onChange(async (value) => {
      this.plugin.settings.hideEmptyLines = value;
      await this.plugin.saveSettings();
      this.plugin.dispatchSettingToEditors(value);
    }));
  }
};
var RegexInputModal = class extends import_obsidian.Modal {
  constructor(app, initialValue, history, onSubmit) {
    super(app);
    this.textInputEl = null;
    this.initialValue = initialValue;
    this.history = history;
    this.onSubmit = onSubmit;
    this.result = initialValue;
  }
  onOpen() {
    const { contentEl } = this;
    contentEl.empty();
    contentEl.createEl("h2", { text: "Enter Regex Filter" });
    this.inputComponent = new import_obsidian.Setting(contentEl).setName("Regular Expression (supports emoji):").addText((text) => {
      this.textInputEl = text.inputEl;
      text.setValue(this.initialValue).setPlaceholder("e.g., ^\\s*- \\[ \\].*\u{1F4A1}").onChange((value) => {
        this.result = value;
      });
      text.inputEl.focus();
      text.inputEl.select();
      text.inputEl.addEventListener("keydown", (e) => {
        if (e.key === "Enter" && !e.shiftKey && !e.ctrlKey && !e.metaKey && !e.altKey) {
          e.preventDefault();
          this.submit();
        }
      });
    });
    this.inputComponent.controlEl.addClass("regex-filter-input-control");
    if (this.history && this.history.length > 0) {
      const historyEl = contentEl.createDiv({ cls: "regex-filter-history-container" });
      historyEl.createSpan({ text: "History:", cls: "regex-filter-history-label" });
      this.history.forEach((histEntry) => {
        const btn = historyEl.createEl("button", { text: `/${histEntry}/`, cls: "regex-filter-history-item", attr: { title: histEntry } });
        btn.addEventListener("click", () => {
          if (this.textInputEl) {
            this.textInputEl.value = histEntry;
            this.result = histEntry;
            this.textInputEl.focus();
          }
        });
      });
    }
    new import_obsidian.Setting(contentEl).addButton((btn) => btn.setButtonText("Apply Filter").setCta().onClick(() => {
      this.submit();
    })).addButton((btn) => btn.setButtonText("Cancel").onClick(() => {
      this.close();
      this.onSubmit(null);
    }));
  }
  submit() {
    if (this.result && this.result.trim().length > 0) {
      this.close();
      this.onSubmit(this.result);
    } else if (this.result === "") {
      new import_obsidian.Notice("Regex cannot be empty. Filter cancelled.");
      this.close();
      this.onSubmit(null);
    } else {
      new import_obsidian.Notice("Please enter a regular expression.");
    }
  }
  onClose() {
    let { contentEl } = this;
    contentEl.empty();
  }
};
//# sourceMappingURL=data:application/json;base64,
